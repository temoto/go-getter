#!/bin/bash
# Like 'go get' but with pinned package versions. https://github.com/joewalnes/go-getter
set -eu
# TODO: GOPATH is not required in go1.8+
: ${GOPATH?"GOPATH not set"}
: ${1?"Usage: $0 [path-to-go-deps]"}

vcs_command() {
  local package="$1"
  local dest="$GOPATH/src/$package"
  while [[ "$dest" != "$GOPATH/src" ]] && [[ -d "$dest" ]] ; do
    cd "$dest"
    if [[ -d "./.git" ]]; then
      echo "cd $dest && git checkout -q $version --"
      return 0
    elif [[ -d "./.hg" ]]; then
      echo "cd $dest && hg update -q -c $version"
      return 0
    elif [[ -d "./.bzr" ]]; then
      echo "cd $dest && bzr update -q -r $version"
      return 0
    elif [[ -d "./.svn" ]]; then
      echo "cd $dest && svn update -q -r $version"
      return 0
    else
      dest="$(readlink -f $dest/..)"
    fi
  done
  echo "ERROR: Unrecognized VCS system for the golang package $package" >&2
  exit 2
}

step() {
  local package="$1"
  local mode="$2"
  case "$mode" in
  local)
    go get -d $package
  	$(vcs_command "$package") >/dev/null 2>&1 || return 1
    ;;
  update)
    go get -d -u $package
  	$(vcs_command "$package") >&2
    ;;
  install)
    go get $package
    return 0
    ;;
  *)
    echo 'internal error invalid mode' >&2
    exit 3
    ;;
  esac
}

sed -e 's/#.*//' $1 |grep -v -e '^[[:space:]]*$' |while read package version ; do
  echo "$package ($version)" >&2
  rc=0
  step "$package" "local" || rc=$?
  if [[ $rc -eq 1 ]]; then
  	echo "  $package ($version) is not found in local repo, trying go get -u" >&2
  	step "$package" "update"
  fi
  # now that required version is selected, build/install it
  step "$package" "install"
done
